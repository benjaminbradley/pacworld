---------------------------------------------------- FUTURE TASKS:

NEXT STEPS for MVP:
- remap gamepad so 'start' button no longer quits
- shapes with same border are attracted to each other
- once map is finished, do a polishing pass to extend pathways to whatever is at the logical end (i.e. don't stop just short of a room/field/path)
- bug fixes
- check bug log from rpi2 (from redcamp mtg)
- other TODOs in code
- random shape fill color
- dancing transfers fill color
- performance improvements
- get a swirl from another character "ask"
- ? AI ability to detect wall collisions and shrink size when needed?  (test with initial size @ 120) otherwise they'll just stay stuck until they randomly activate the right sequence of swirls to get un-stuck
- show progress during world generation
- max time before forced reset - in case some art types or players are inaccessible, etc.

FIXME:
- door placement algorithm (world.py#negotiateDoorPlacement) will coordinate door location with existing door, but if 2 rooms are side-by-side next to the SAME side of one adjacent room, the second one will move the door during ITS 'coordinate door placement' (see topleft corner of -s 2357 -c 3)
- giveSwirl should give a swirl of the type that is currently selected (looks like a random one is getting assigned?)
- calculate newAngle based on lastPosition not oldestPosition (see stash)
- intersections should override pathways, suppress path outlines

META FEATURES:
- segment logging by e.g. world generation, autonomous behavior, draw/rendering, etc. to easily toggle on/off and/or separate channels
- add memory profiling to watch for memory leaks

PERFORMANCE:
bench marking - on MacBook Air:
  base:
    scale=3   fps ~ 30; framespeed ~ 20
    scale=4   fps ~ 27; framespeed ~ 29
    scale=5   fps ~ 16; framespeed ~ 60
  after mapTopLeft caching:
    scale=5   fps ~ 20; framespeed ~ 45
  after nearby walls:
    scale=5   fps ~ 28; framespeed ~ 30
  after pygame.event.get and art pre-rendering:
    scale=5   fps ~ 30; framespeed ~ 22
- change all shape.makeSprite calls to set a dirty flag, collapse into a single makeSprite call :: watch out to preserve in shape.update(): self.changeAngle() followed by self.move() in the same update, and collision test will matter /// maybe a flag that signals mask-only generation or full graphical mode
- turn drawn swirls into sprites to speed animation
- could do lazy sprite generation, only activated when near screen
- cache world def after generation, indexed by seed & version# (add version#)
- profiler-based performance improvements (sprite#update, shape#update, map#wallCollision)
  ref: https://docs.python.org/3.6/library/profile.html
  python3 -m cProfile pacworld.py -c 5 -a | sed -e $'s/  /\t/g' > pacprofile.tsv

ENHANCEMENTS:
- immediately activate a swirl on the player when it is received for the first time
- change direction of burst for up/down activation
- consider getting rid of activate-able swirls, and instead have the art pieces change the shapes directly. swirls would just be a mark of having been changed.
- increase move cost for "blank" spaces (outside of rooms, pathways, fields) to discourage AI routing; slow down player movement in that terrain
- identify inaccessible areas and color them, move any sprites out of there
- different backgrounds for each room
- allow multiple doors per room side
- special ability to activate all of your swirls one after another
- add support for different colors to DrawSpiral()
